{"name": "test_doSignUp[chrome-Keshav-1123456789-Keshav@asdf.com-India-Delhi-Keshav-asdf1234]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x7fd8282b9dc0>, locator = \"//i[@class='eicon-close']__XPATH\"\n\n    def find_element(self, locator):\n        try:\n>           web_element = self.driver.find_element(self.get_locator_signature_value(locator)[0],\n                                                   self.get_locator_signature_value(locator)[1])\n\nSelenium_Operations/Element_Operations.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c73ddba29be5d8c5f8e0983507e53d1\")>, by = 'xpath', value = \"//i[@class='eicon-close']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:748: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c73ddba29be5d8c5f8e0983507e53d1\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//i[@class='eicon-close']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd8282dd820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...000186e5af94 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x0000000186e55d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//i[@class='eicon-close']\"}\nE         (Session info: chrome=127.0.6533.100); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       0   chromedriver                        0x00000001052f50b8 cxxbridge1$str$ptr + 1887276\nE       1   chromedriver                        0x00000001052ed794 cxxbridge1$str$ptr + 1856264\nE       2   chromedriver                        0x0000000104efc82c cxxbridge1$string$len + 88524\nE       3   chromedriver                        0x0000000104f40834 cxxbridge1$string$len + 367060\nE       4   chromedriver                        0x0000000104f7848c cxxbridge1$string$len + 595500\nE       5   chromedriver                        0x0000000104f35474 cxxbridge1$string$len + 321044\nE       6   chromedriver                        0x0000000104f360e4 cxxbridge1$string$len + 324228\nE       7   chromedriver                        0x00000001052bca9c cxxbridge1$str$ptr + 1656336\nE       8   chromedriver                        0x00000001052c14f8 cxxbridge1$str$ptr + 1675372\nE       9   chromedriver                        0x00000001052a2980 cxxbridge1$str$ptr + 1549556\nE       10  chromedriver                        0x00000001052c1ca8 cxxbridge1$str$ptr + 1677340\nE       11  chromedriver                        0x0000000105294690 cxxbridge1$str$ptr + 1491460\nE       12  chromedriver                        0x00000001052deaf0 cxxbridge1$str$ptr + 1795684\nE       13  chromedriver                        0x00000001052dec6c cxxbridge1$str$ptr + 1796064\nE       14  chromedriver                        0x00000001052ed3c8 cxxbridge1$str$ptr + 1855292\nE       15  libsystem_pthread.dylib             0x0000000186e5af94 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x0000000186e55d34 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x7fd8282b9dc0>, locator = \"//i[@class='eicon-close']__XPATH\"\n\n    def click(self, locator):\n        flag = False\n        try:\n>           ele = self.find_element(locator)\n\nSelenium_Operations/Element_Operations.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x7fd8282b9dc0>, locator = \"//i[@class='eicon-close']__XPATH\"\n\n    def find_element(self, locator):\n        try:\n            web_element = self.driver.find_element(self.get_locator_signature_value(locator)[0],\n                                                   self.get_locator_signature_value(locator)[1])\n            self.highlight_element(web_element)\n            log.logger.info(f\"{web_element} in focus now\")\n            print(f\"{web_element} in focus now\")\n            return web_element\n        except:\n            print(traceback.print_exc())\n>           assert False\nE           AssertionError\n\nSelenium_Operations/Element_Operations.py:34: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Dummy_Registration.Test_Dummy_Registration object at 0x7fd8282c60d0>, name = 'Keshav', phoneNum = 1123456789, email = 'Keshav@asdf.com'\ncountry = 'India', city = 'Delhi', username = 'Keshav', password = 'asdf1234'\n\n    @pytest.mark.parametrize(\"name, phoneNum, email, country, city, username, password\",\n                             dataProvider.get_data(\"LoginTest\"))\n    @pytest.mark.regression\n    def test_doSignUp(self, name, phoneNum, email, country, city, username, password):\n        Selenium4PopUpPage = Selenium_4_Popup_Page(self.driver)\n        home = Home_Page(self.driver)\n        dummy_reg = dummy_registration(self.driver)\n>       Selenium4PopUpPage.close_selenium_four_popup()\n\nTest_Cases/test_Dummy_Registration.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/Selenium_4_Popup_Page.py:18: in close_selenium_four_popup\n    self.click(Selenium_4_pop_up_OR.Selenium4_popup_close_icon)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x7fd8282b9dc0>, locator = \"//i[@class='eicon-close']__XPATH\"\n\n    def click(self, locator):\n        flag = False\n        try:\n            ele = self.find_element(locator)\n            self.highlight_element(ele)\n            ele.click()\n            flag = True\n            log.logger.info(f\"{ele} clicked successfully\")\n            print(f\"{ele} clicked successfully\")\n        except:\n            print(traceback.print_exc())\n>           assert False\nE           AssertionError\n\nSelenium_Operations/Element_Operations.py:61: AssertionError"}, "attachments": [{"name": "log", "source": "9a19e993-a379-4952-955b-a84d5a454670-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "name", "value": "'Keshav'"}, {"name": "phoneNum", "value": "1123456789"}, {"name": "email", "value": "'Keshav@asdf.com'"}, {"name": "country", "value": "'India'"}, {"name": "city", "value": "'Delhi'"}, {"name": "username", "value": "'Keshav'"}, {"name": "password", "value": "'asdf1234'"}], "start": 1723268725606, "stop": 1723268750531, "uuid": "d938207a-2642-467f-bbff-1d7952d85e4a", "historyId": "ce375819c0bc4e2038ae691c42d8884f", "testCaseId": "e82b7b78b7a980d81d99a40ae9845001", "fullName": "Test_Cases.test_Dummy_Registration.Test_Dummy_Registration#test_doSignUp", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_Cases"}, {"name": "suite", "value": "test_Dummy_Registration"}, {"name": "subSuite", "value": "Test_Dummy_Registration"}, {"name": "host", "value": "MacBook-Air.local"}, {"name": "thread", "value": "45988-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Cases.test_Dummy_Registration"}]}